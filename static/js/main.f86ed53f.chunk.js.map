{"version":3,"sources":["TaskCard.js","Column.js","App.js","serviceWorker.js","index.js"],"names":["left","className","width","height","viewBox","fill","xmlns","fillRule","d","right","fill-rule","TaskCard","props","task","name","onClick","changeStatus","id","direction","status","Column","tasks","filter","el","map","key","uuidv4","initialTasks","priority","App","useState","setTasks","isOpenCreateTaskForm","setIsOpenCreateTaskForm","taskInput","setTaskInput","isActiveButtonTaskCreate","setIsActiveButtonTaskCreate","taskReset","console","log","statuses","updatedTasks","indexOf","htmlFor","type","value","onChange","e","target","length","preventDefault","newTask","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f86ed53f.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst left = <svg className=\"bi bi-arrow-left\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\"\n          d=\"M5.854 4.646a.5.5 0 0 1 0 .708L3.207 8l2.647 2.646a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 0 1 .708 0z\"/>\n    <path fillRule=\"evenodd\" d=\"M2.5 8a.5.5 0 0 1 .5-.5h10.5a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z\"/>\n</svg>\n\nconst right = <svg className=\"bi bi-arrow-right\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                   xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\"\n          d=\"M10.146 4.646a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708L12.793 8l-2.647-2.646a.5.5 0 0 1 0-.708z\"/>\n    <path fill-rule=\"evenodd\" d=\"M2 8a.5.5 0 0 1 .5-.5H13a.5.5 0 0 1 0 1H2.5A.5.5 0 0 1 2 8z\"/>\n</svg>\n\nfunction TaskCard(props) {\n\n    return (\n        <div>\n            <div className=\"card bg-light mb-3\">\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{props.task.name}</h5>\n\n            <span onClick={() => props.changeStatus({id: props.task.id, direction: 'left'})}>\n                {(props.task.status !== 'todo') && left}\n            </span>\n            <span onClick={() => props.changeStatus({id: props.task.id, direction: 'right'})}>\n                {(props.task.status !== 'done') && right}\n            </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default TaskCard;\n","import React, {useState} from 'react';\nimport TaskCard from \"./TaskCard\";\n\n\nfunction Column(props) {\n\n    return (\n        <div>\n\n            { props.tasks\n                .filter(el => el.status === props.status)\n                .map(el => <TaskCard key={el.id} task={el} changeStatus={props.changeStatus}/>)\n\n            }\n\n        </div>\n    );\n}\n\nexport default Column;\n","import React, {useState} from 'react';\nimport Column from \"./Column\";\nimport { v4 as uuidv4 } from 'uuid';\nuuidv4(); // â‡¨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n\nconst initialTasks = [\n    {id: uuidv4(), name: 'Create F1', priority: 10, status: 'todo'},\n    {id: uuidv4(), name: 'Create F2', priority: 20, status: 'review'},\n    {id: uuidv4(), name: 'Create F3', priority: 20, status: 'todo'},\n    {id: uuidv4(), name: 'Create F4', priority: 30, status: 'done'},\n    {id: uuidv4(), name: 'Create F4', priority: 30, status: 'progress'},\n    {id: uuidv4(), name: 'Create F4', priority: 30, status: 'done'},\n\n]\nfunction App() {\n    const [tasks, setTasks] = useState(initialTasks)\n    const [isOpenCreateTaskForm, setIsOpenCreateTaskForm] = useState(false)\n    const [taskInput, setTaskInput] = useState('')\n    const [isActiveButtonTaskCreate, setIsActiveButtonTaskCreate] = useState(false)\n\n    const openCreateTaskForm = () => {\n        setIsOpenCreateTaskForm(true)\n    }\n\n    const onTaskChange = (e) => {\n        setIsActiveButtonTaskCreate(e.target.value.length > 4)\n        setTaskInput(e.target.value);\n    }\n\n    const taskSubmit = (e) => {\n        // e.preventDefault();\n        // console.log(taskInput);\n        // taskReset();\n        e.preventDefault();\n        const newTask = {\n            id: uuidv4(),\n            name: taskInput,\n            priority: 20,\n            status: 'todo'\n        };\n        setTasks([...tasks, newTask])\n        taskReset();\n    };\n\n    const taskReset = () => {\n        setTaskInput('');\n        setIsOpenCreateTaskForm(false);\n        setIsActiveButtonTaskCreate(false);\n    };\n\n    const changeStatus = ({id, direction}) => {\n       console.log(id, direction)\n        const statuses = ['todo', 'progress', 'review', 'done']\n        const updatedTasks = tasks.map(el => {\n            if(el.id === id){\n               if(direction === 'left' ){\n                   el.status = statuses[statuses.indexOf(el.status) - 1];\n               }\n                if(direction === 'right'){\n                    el.status = statuses[statuses.indexOf(el.status) + 1];\n                }\n               return el;\n            } else return el;\n        });\n       setTasks(updatedTasks);\n    };\n\n\n    return (\n        <div>\n\n            <div className=\"container\">\n                <h1>Kanban</h1>\n\n                {!isOpenCreateTaskForm &&\n                <button className=\"btn btn-primary\"\n                        onClick={openCreateTaskForm}>Create Task</button>\n                }\n                {isOpenCreateTaskForm &&\n                <form>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"exampleInputEmail1\">Task</label>\n                        <input type=\"text\" className=\"form-control\"\n                               value={taskInput}\n                               onChange={onTaskChange}/>\n                    </div>\n\n                    <button type=\"submit\" className=\"btn btn-primary\"\n                            onClick={taskSubmit}\n                            disabled={!isActiveButtonTaskCreate}>Submit\n                    </button>\n                    <button className=\"btn btn-secondary\"\n                            onClick={taskReset}>Cancel\n                    </button>\n                </form>\n                }\n                <hr/>\n                <div className=\"row\">\n\n                    <div className=\"col-sm\">\n\n                        TO DO\n\n                        <hr className='mb-10'/>\n                        <Column tasks={tasks} status='todo' changeStatus={changeStatus}/>\n                    </div>\n                    <div className=\"col-sm\">\n                        IN PROGRESS\n                        <hr className='mb-10'/>\n                        <Column tasks={tasks} status='progress' changeStatus={changeStatus}/>\n                    </div>\n                    <div className=\"col-sm\">\n                        REVIEW\n                        <hr className='mb-10'/>\n                        <Column tasks={tasks} status='review' changeStatus={changeStatus}/>\n                    </div>\n                    <div className=\"col-sm\">\n                        DONE\n                        <hr className='mb-10'/>\n                        <Column tasks={tasks} status='done' changeStatus={changeStatus}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}